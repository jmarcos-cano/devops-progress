{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation repository display Devops Progress across multiple projects. e4me pap","title":"Home"},{"location":"e4me/","text":"Description \u00b6 Here you can find \"Devops Transformation Plan\" progress for E4M exclusively. Info There are still some gaps that I need to answer before giving an actual and complete plan; however I can assure the following areas are the ones we care. We will need to work through iterations and discuss the plan with the team; this is the first step to get the plan in place. The plan will circle around specific areas: Platform Architecture. Continuous Integration (CI) Continuous Delivery (CD) Automated Testing (AT) Infrastucture Monitoring & Logging (M&L) Others. Gantt progress \u00b6 gantt dateFormat YYYY-MM-DD excludes Saturday, Sunday axisformat %B-%d Week: %U todayMarker on title E4m Devops Transformation Plan section PA TBD: pa1, 2021-10-15, 1w section CI TBD : ci1, 2021-10-15, 1w Have a DR for wildfly's Dockerfile: ci2, after ci1, 1w Propose a multi-stage Dockerfile to improve CI: after ci1, 1w Create a dev.multi-stage Dockerfile for development environment builds: ci3, after ci2, 2w Research/ask for a better CI infrastructure: ci4, after ci3, 2w section CD Research configuration management for e4m java platform : cd1, 2021-10-21, 1w Create Helm Chart: cd2, after cd1, 1w Research Gimlet for gitops env management: cd3, after cd2, 1w Setup gitops environment repositories : cd4, after cd3, 1w section AT TBD: at1 , 1w section Infrastucture TBD : 2021-10-26 , 1w section M&L TBD: 2021-11-12 , 1w section Others TBD : 2021-11-05, 10d Note done \u27a1\ufe0f \u2b1c (grey) active \u27a1\ufe0f \ud83d\udfe3 (ligth purple) any item \u27a1\ufe0f \ud83d\udfea (purple)","title":"E4Me"},{"location":"e4me/#description","text":"Here you can find \"Devops Transformation Plan\" progress for E4M exclusively. Info There are still some gaps that I need to answer before giving an actual and complete plan; however I can assure the following areas are the ones we care. We will need to work through iterations and discuss the plan with the team; this is the first step to get the plan in place. The plan will circle around specific areas: Platform Architecture. Continuous Integration (CI) Continuous Delivery (CD) Automated Testing (AT) Infrastucture Monitoring & Logging (M&L) Others.","title":"Description"},{"location":"e4me/#gantt-progress","text":"gantt dateFormat YYYY-MM-DD excludes Saturday, Sunday axisformat %B-%d Week: %U todayMarker on title E4m Devops Transformation Plan section PA TBD: pa1, 2021-10-15, 1w section CI TBD : ci1, 2021-10-15, 1w Have a DR for wildfly's Dockerfile: ci2, after ci1, 1w Propose a multi-stage Dockerfile to improve CI: after ci1, 1w Create a dev.multi-stage Dockerfile for development environment builds: ci3, after ci2, 2w Research/ask for a better CI infrastructure: ci4, after ci3, 2w section CD Research configuration management for e4m java platform : cd1, 2021-10-21, 1w Create Helm Chart: cd2, after cd1, 1w Research Gimlet for gitops env management: cd3, after cd2, 1w Setup gitops environment repositories : cd4, after cd3, 1w section AT TBD: at1 , 1w section Infrastucture TBD : 2021-10-26 , 1w section M&L TBD: 2021-11-12 , 1w section Others TBD : 2021-11-05, 10d Note done \u27a1\ufe0f \u2b1c (grey) active \u27a1\ufe0f \ud83d\udfe3 (ligth purple) any item \u27a1\ufe0f \ud83d\udfea (purple)","title":"Gantt progress"},{"location":"glossary/","text":"Continuous Integration \u00b6 Continuous integration is a software development practice where developers regularly merge their code changes into a central repository, after which automated builds and tests are run. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates. Continuous Delivery \u00b6 Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. It expands upon continuous integration by deploying all code changes to a testing environment and/or a production environment after the build stage. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact that has passed through a standardized test process. Infrastucture as Code \u00b6 Infrastructure as code is a practice in which infrastructure is provisioned and managed using code and software development techniques, such as version control and continuous integration. The cloud\u2019s API-driven model enables developers and system administrators to interact with infrastructure programmatically, and at scale, instead of needing to manually set up and configure resources. Thus, engineers can interface with infrastructure using code-based tools and treat infrastructure in a manner similar to how they treat application code. Because they are defined by code, infrastructure and servers can quickly be deployed using standardized patterns, updated with the latest patches and versions, or duplicated in repeatable ways. Monitoring & Logging \u00b6 Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product\u2019s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of this data also helps organizations more proactively monitor their services. Microservices \u00b6 The microservices architecture is a design approach to build a single application as a set of small services. Each service runs in its own process and communicates with other services through a well-defined interface using a lightweight mechanism, typically an HTTP-based application programming interface (API). Microservices are built around business capabilities; each service is scoped to a single purpose. You can use different frameworks or programming languages to write microservices and deploy them independently, as a single service, or as a group of services. Platform Architecture \u00b6 By platform architecture I mean all the pieces of software, infrastructure and deployment that make up the platform. Cloud Native \u00b6 At its core, the term cloud native is a way to increase the velocity of your business and a method to structure your teams to take advantage of the automation and scalability that cloud native technologies like Kubernetes offer.","title":"Glossary"},{"location":"glossary/#continuous-integration","text":"Continuous integration is a software development practice where developers regularly merge their code changes into a central repository, after which automated builds and tests are run. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates.","title":"Continuous Integration"},{"location":"glossary/#continuous-delivery","text":"Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. It expands upon continuous integration by deploying all code changes to a testing environment and/or a production environment after the build stage. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact that has passed through a standardized test process.","title":"Continuous Delivery"},{"location":"glossary/#infrastucture-as-code","text":"Infrastructure as code is a practice in which infrastructure is provisioned and managed using code and software development techniques, such as version control and continuous integration. The cloud\u2019s API-driven model enables developers and system administrators to interact with infrastructure programmatically, and at scale, instead of needing to manually set up and configure resources. Thus, engineers can interface with infrastructure using code-based tools and treat infrastructure in a manner similar to how they treat application code. Because they are defined by code, infrastructure and servers can quickly be deployed using standardized patterns, updated with the latest patches and versions, or duplicated in repeatable ways.","title":"Infrastucture as Code"},{"location":"glossary/#monitoring-logging","text":"Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product\u2019s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of this data also helps organizations more proactively monitor their services.","title":"Monitoring &amp; Logging"},{"location":"glossary/#microservices","text":"The microservices architecture is a design approach to build a single application as a set of small services. Each service runs in its own process and communicates with other services through a well-defined interface using a lightweight mechanism, typically an HTTP-based application programming interface (API). Microservices are built around business capabilities; each service is scoped to a single purpose. You can use different frameworks or programming languages to write microservices and deploy them independently, as a single service, or as a group of services.","title":"Microservices"},{"location":"glossary/#platform-architecture","text":"By platform architecture I mean all the pieces of software, infrastructure and deployment that make up the platform.","title":"Platform Architecture"},{"location":"glossary/#cloud-native","text":"At its core, the term cloud native is a way to increase the velocity of your business and a method to structure your teams to take advantage of the automation and scalability that cloud native technologies like Kubernetes offer.","title":"Cloud Native"},{"location":"pap/","text":"Description \u00b6 Here you can find my progress anytime you would like to see where are we at our \"Devops Transformation Plan\" ; Info I'll try my best to keep it up to date Gantt progress \u00b6 gantt dateFormat YYYY-MM-DD excludes Saturday, Sunday axisformat %B-%d Week: %U todayMarker on title Devops Transformation Plan section Pilot Project Provision CI/CD Infrastucture, setup Jenkins in k8s : done, 2021-03-01, 2w Create Pilot's Jenkinsfile & multi-stage Dockerfile : 5d Provision CI/CD Infrastucture, setup ArgoCD & Octopus Deploy in k8s (GitOps) : active, 10w Create/Review Helm chart (git repo) & Helm repository: 2w Test Helm chart via Push: done, 3d Create Octopus CD pipeline for Push : done, 3d Create migration tooling : 1w section PreMigration Research & implement git-tfs tool : done,pm1, 2021-06-21, 10d Create a testing repo from CSP_IPOPR4 branch : done, pm2, after pm1 , 2w Create a testing repo from --all branches : active, pm3, after pm2 , 2w Start testing the mechanism/workflow/steps for the migration: done, pm4, after pm3 , 2w Create automation for the migration: active, after pm4, 5d Migrate UI: active, 1week Migrate Backend components (personalization, osm-cache, emr-ml-[db-service|ril|reset-server], job-scheduler, spellchecker, op-batch, msgraph-service ): active,5d section Migration Break out the testing repo into multiple mini-repositories: m3, after m2 , 4d Create main/big git repo with history : m4, after m3 , 1w Start moving away single repositories [iterate] : after m1 m2 m3 m4, 4w section Training Devops Training : 2021-06-26 , 12d Docker Training : 10d Jenkins Training [Optional]: 4d Helm Training [Optional]: 2d Train everyone in the process: 2w Prepare Git Training : 2021-06-27, 2w Git Training : 2021-07-21, 1w Prepare Kubernetes Training/Material/hands-on: done, 2021-05-03, 2021-06-28 Kubernetes Training, train 3 groups: done, 2021-05-17, 2021-07-07 section Culture Research team's health tool: done, 2021-04-12 , 4d Human Devops Presentation and Suggestion: done, 1w Create first \"test\" survey: done, today, 3d section Others KIE server integration Docker build : done, 2021-04-05, 10d KIE Helm deploy demo : done, 5d Helm chart hub creation and refactor : done, 2021-04-26, 10d Sonarqube integration and setup: done, 2021-06-10, 3w PAP Helm Chart : active, 5d Note done => grey \u2b1c active => ligth purple any item => purple \ud83d\udfea","title":"PAP"},{"location":"pap/#description","text":"Here you can find my progress anytime you would like to see where are we at our \"Devops Transformation Plan\" ; Info I'll try my best to keep it up to date","title":"Description"},{"location":"pap/#gantt-progress","text":"gantt dateFormat YYYY-MM-DD excludes Saturday, Sunday axisformat %B-%d Week: %U todayMarker on title Devops Transformation Plan section Pilot Project Provision CI/CD Infrastucture, setup Jenkins in k8s : done, 2021-03-01, 2w Create Pilot's Jenkinsfile & multi-stage Dockerfile : 5d Provision CI/CD Infrastucture, setup ArgoCD & Octopus Deploy in k8s (GitOps) : active, 10w Create/Review Helm chart (git repo) & Helm repository: 2w Test Helm chart via Push: done, 3d Create Octopus CD pipeline for Push : done, 3d Create migration tooling : 1w section PreMigration Research & implement git-tfs tool : done,pm1, 2021-06-21, 10d Create a testing repo from CSP_IPOPR4 branch : done, pm2, after pm1 , 2w Create a testing repo from --all branches : active, pm3, after pm2 , 2w Start testing the mechanism/workflow/steps for the migration: done, pm4, after pm3 , 2w Create automation for the migration: active, after pm4, 5d Migrate UI: active, 1week Migrate Backend components (personalization, osm-cache, emr-ml-[db-service|ril|reset-server], job-scheduler, spellchecker, op-batch, msgraph-service ): active,5d section Migration Break out the testing repo into multiple mini-repositories: m3, after m2 , 4d Create main/big git repo with history : m4, after m3 , 1w Start moving away single repositories [iterate] : after m1 m2 m3 m4, 4w section Training Devops Training : 2021-06-26 , 12d Docker Training : 10d Jenkins Training [Optional]: 4d Helm Training [Optional]: 2d Train everyone in the process: 2w Prepare Git Training : 2021-06-27, 2w Git Training : 2021-07-21, 1w Prepare Kubernetes Training/Material/hands-on: done, 2021-05-03, 2021-06-28 Kubernetes Training, train 3 groups: done, 2021-05-17, 2021-07-07 section Culture Research team's health tool: done, 2021-04-12 , 4d Human Devops Presentation and Suggestion: done, 1w Create first \"test\" survey: done, today, 3d section Others KIE server integration Docker build : done, 2021-04-05, 10d KIE Helm deploy demo : done, 5d Helm chart hub creation and refactor : done, 2021-04-26, 10d Sonarqube integration and setup: done, 2021-06-10, 3w PAP Helm Chart : active, 5d Note done => grey \u2b1c active => ligth purple any item => purple \ud83d\udfea","title":"Gantt progress"}]}